<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\User;
use App\Utility\FunctionCommon;
use Cake\Controller\Component\AuthComponent;
use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\I18n\I18n;
use Cake\ORM\TableRegistry;
use Cake\Utility\Security;
use Symfony\Component\Config\Definition\Exception\Exception;

/**
 * Login Controller
 *
 * @property \App\Model\Table\UsersTable $Login
 */
class AuthMasterController extends AppController
{
    public $user = [];
    public $components = ['Cookie','Flash'];
    public $paginate = [
        'limit' => 10
    ];
    protected $isHead;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        // $this->_init_language();
        // $this->loadComponent('Notification.Notification');
        $this->_authInit();

        $this->_initNotification();
    }
    private function _initNotification(){
        if (!empty($this->user)) {
//            $tblUser = TableRegistry::get('Users');
            // set Group list user_id
            $this->getUserListByRole();
            // count all unread notifications
            // $countUnreadNoti =  $this->Notification->countNotifications($this->user->id,true);
            // get all unread notifications;
            // $totalUnreadNoti = $this->Notification->getNotifications($this->user->id,null,null,10);
            /*$arrNotification = [
                'count' => $countUnreadNoti,
                'notificationList' => $totalUnreadNoti
            ];*/
            // $this->set(compact('arrNotification'));
            // $this->setTemplatePush();
        }
    }
    public function download($id){
        // Run any pre-download logic here.
        // Send file as response
        $path =  WWW_ROOT . 'file\request\\'.$id;
        $this->response->file(
            $path,
            array(
                'download' => true,
                'name' => $id
            )
        );
        return $this->response;
    }
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
        // set default authentication for all users
        // Allow users to register and logout.
        // You should not add the "login" action to allow list. Doing so would
        // cause problems with normal functioning of AuthComponent.
//        $this->_authInit();
        $this->_allowActions();

    }
    protected function _authInit()
    {
        $this->loadComponent('Paginator');
        $this->loadComponent('MyAuth',[
            'className'=>'SpcAuth.Auth',
            'autoClearCache' => true,
            'multiRole' => true,
            'rolesTable'=> 'Roles',
            'pivotTable'=> 'tbl_master_role_user',
            'mode' =>false,
            'loginAction' => [
                'controller' => 'AuthMaster',
                'action' => 'login',
                'login'
            ],
            'loginRedirect' => [
                'controller' => 'Pages',
                'action' => 'display',
                'index'
            ],
            'logoutRedirect' => [
                'controller' => 'AuthMaster',
                'action' => 'login',
                'login'
            ],
        ]);
        $this->loadComponent(
            'Auth', [
            'authenticate' => [
                'FOC/Authenticate.Cookie' => [
                    'fields' => ['username' => 'username', 'password' => 'password'],
                    'userModel' => 'Users',
                    'passwordHasher' => [
                        'className' => 'Legacy',
                    ],
                    'scope' => ['Users.confirmed' => 1]
                ],
                'FOC/Authenticate.MultiColumn' => array(
                    'fields' => ['username' => 'username', 'password' => 'password'],
                    'passwordHasher' => [
                        'className' => 'Legacy',
                    ],
                    'columns' => ['username', 'email'],
                    'userModel' => 'Users',
                    'scope' => ['Users.confirmed' => 1]
                )
            ],
            'loginAction' => [
                'controller' => 'AuthMaster',
                'action' => 'login',
                'login'
            ],
            'loginRedirect' => [
                'controller' => 'Pages',
                'action' => 'display',
                'index'
            ],
            'logoutRedirect' => [
                'controller' => 'AuthMaster',
                'action' => 'login',
                'login'
            ],
            'authorize' => [
                'SpcAuth.Spc'=>['multiRole'=>true,
                'pivotTable' => 'tbl_master_role_user',
                'autoClearCache' =>Configure::read('debug'),
            ]],
            'unauthorizedRedirect' =>[
                'controller' => 'AuthMaster',
                'action' => 'accessDenied',
                'access_denied'
            ]

        ]);

        if (!$this->Auth->user()) {
            $user = $this->Auth->identify();
            $this->Auth->setUser($user);
        }

        if ($this->Auth->user()) {
            $users = TableRegistry::get('Users');
            $this->user = $users->find()->where(['Users.id' => $this->Auth->user()['id']])
                ->contain(['role', 'dep', 'Profiles'])->first();
            $this->isHead = HEADQUARTER_ID === $this->user->dep->id;
            $this->set('userInfo', $this->user);
            $this->set('params', $this->params);
            if (!empty($this->user) /*&& empty($this->user->profile)*/) {
                /*if (!$this->_isUpdateProfile()){
                    return $this->redirect('/user/profile');
                }*/
                // return $this->redirect($this->Auth->redirectUrl());
            } elseif(empty($this->user)){
                return $this->redirect($this->Auth->redirectUrl());
            }
            $this->_initMenu();
        }
    }
    private function _isUpdateProfile(){
        if($this->request->params['action'] === 'saveProfile' && $this->request->params['controller'] === 'Users')
            return true;
        if($this->request->params['action'] !== 'profile' || $this->request->params['controller'] !== 'Users')
            return false;
        return true;
    }
    protected function _allowActions()
    {
        $this->Auth->allow([ 'login', 'logout' , 'accessDenied','pageNotFound']);

    }
    public function accessDenied(){

    }
    /**
     * Login method
     *
     *
     */
    public function login()
    {
        $this->set("title","Please Enter Your Information");
        $this->viewBuilder()->layout('login-form');

        if ($this->request->is('post')) {
            $user = $this->Auth->identify();
            if ($user) {
                $this->Auth->setUser($user);
                $this->_setCookie();
                $this->Flash->success(__('login_success'));
                return $this->redirect($this->Auth->redirectUrl());
            }
//            show error
            $this->Flash->error(__('login_error'));
        }
    }
    /**
     * Logout method
     *
     *
     */
    public function logout()
    {
        $this->Auth->logout();
        // $this->Cookie->delete('RememberMe');
        return $this->redirect($this->Auth->logout());
    }
    private function _initMenu(){
        $menus = [
            'left-menu'=>[
                [
                    'position'=>2,
                    'title'=>__('department'),
                    'icon' => 'icon-home-3',
                    'url' => ['controller'=>"Departments",'action'=>'index'],
                    'hasPermission' => false,
                    'active' => false
                ],
                [
                    'position'=>3,
                    'title'=>__('user'),
                    'icon' => 'fa fa-users',
                    'url' => ['controller'=>"Users",'action'=>'index'],
                    'children' => [
                        [
                            'position'=>1,
                            'title'=>__('my_profile'),
                            'url' => ['controller'=>"Users",'action'=>'profile'],
                            'active' => false,
                            'hasPermission' => false

                        ],
                        [
                            'position'=>2,
                            'title'=>__('manage_user'),
                            'url' => ['controller'=>"Users",'action'=>'index'],
                            'active' => false,
                            'hasPermission' => false
                        ],
                        [
                            'position'=>3,
                            'title'=> __('create_user'),
                            'url' => ['controller'=>"Users",'action'=>'add'],
                            'active' => false,
                            'hasPermission' => false
                        ]
                    ],
                    'active' => false,
                    'hasPermission' => false
                ],
                [
                    'position'=>4,
                    'title'=>__('configuration'),
                    'icon' => 'icon-cog-3',
                    'url' => ['controller'=>"Roles",'action'=>'index'],
                    'active' => false,
                    'hasPermission' => false
                ],
                [
                    'position'=>5,
                    'title'=>__('request'),
                    'icon' => 'icon-doc-inv-alt',
                    'url' => ['controller'=>"Requests",'action'=>'index'],
                    'active' => false,
                    'hasPermission' => false
                ]
            ]
        ];
        // check roles
        $listAcl = $this->MyAuth->getActionByRoles($this->Auth->user());
        $result = $this->_checkRole($menus['left-menu'],$listAcl);
        $this->set('sidebar',$result);
    }
    private function _checkRole(array $menus , $listAcl , $checkPerm = false){
        foreach ($menus as $key => $menu )
        {
            if(isset($menu['children'])){
                $menu['children'] = $this->_checkRole($menu['children'],$listAcl);
                $menus[$key]['children'] =  $menu['children'];
                $menus[$key]['hasPermission'] = $this->_checkRole($menu['children'],$listAcl,true);
            }
            if(isset($listAcl[$menu['url']['controller']]) && ( in_array('*',$listAcl[$menu['url']['controller']]) || in_array($menu['url']['action'],$listAcl[$menu['url']['controller']]))){
                $menus[$key]['hasPermission'] = true;
                if($checkPerm){
                    return true;
                }
                if($menu['url']['controller'] === $this->request->params['controller']){
                    $menus[$key]['active'] = true;
                }
            }
        }
        return $menus;
    }
    protected function _setCookie()
    {
        $pass  =  base64_encode(Security::encrypt($this->request->data('password'), Configure::read("Security.password")));
        if (!$this->request->data('remember_me')) {
            return false;
        }
        $data = [
            'username' => $this->request->data('username'),
            'password' => $this->request->data('password')
        ];
        $this->Cookie->write('RememberMe', $data, true, '+1 week');
        return true;
    }
    private function _init_language(){
        $this->set('ddlLanguage', Configure::read('language'));
        $language = (!empty($this->request->session()->read('Config.language')))   ?   $this->request->session()->read('Config.language') : 'jp_JP';
        $this->set('selectLanguage', isset(Configure::read('language')[$language]) ? Configure::read('language')[$language] : 'Japan (JP)');
        switch($language)
        {
            case "jp_JP":
                I18n::locale('jp_JP');
                $result[] = array(
                    'ok'=>I18n::locale()
                );
                break;
            default:
                I18n::locale('en_US');
                break;
        }

    }
    public function changeLanguage()
    {
        $this->request->allowMethod('ajax');
        $session = $this->request->session();
        if($this->request->is('ajax')){
            if (!empty($this->request->query('keyLanguage')) && $this->request->query('keyLanguage') !=  $session->read('Config.language')) {
                $session->write('Config.language', $this->request->query('keyLanguage'));
                $this->Cookie->write('language', $this->request->query('keyLanguage'), false, '20 days');
            }
            $result = array(
                'language'=>$this->request->query('keyLanguage')
            );
        }else{
            if ($this->Cookie->read('language') && !$session->check('Config.language')) {
                $session->write('Config.language', $this->Cookie->read('language'));
            }
        }
        $this->_init_language();
        $this->set(compact('result'));
        $this->set('_serialize', ['result']);
    }
    protected function responseData($status = false , $data = null){
         $strStatus = $status ? 'Success' : 'Error';
         $strMessage = $status ? __('successMes') : __('errorMes');
        $result = [
            'status'=> $strStatus,
            'mode'=>$status ? 200 : 500,
            'response'=>is_null($data) ? $strMessage : $data
        ];
        return $result;
    }
    protected function getPusherInfo($type,$id){
        $param = [
            'id'=> $id,
            'type_id'=> $type,
            'cate'=> CATEGORY_REQUEST,
        ];
        if($type !== ADD_REQUEST_BY_TOP)
        {
            // pusher for manage and write activity
            $param['users'] =  $this->getApprovalList($type, $id);
            if(!empty($param['users']) && is_array($param['users'])){
                return $this->addTemplateForPusher($param);
            }
        }
        return null;
    }
    protected function getTypeId($type){
        if($this->user->role[0]->name ==='top') {
            $result = [
                'app' => APPROVE_REQUEST_BY_TOP,
                'rej' => REJECT_REQUEST_BY_TOP,
                'ret' => RETURN_REQUEST_BY_TOP,
                'add' => ADD_REQUEST_BY_TOP
            ];
        }elseif ($this->user->role[0]->name ==='manager'){
            $result = [
                'app' => APPROVE_REQUEST_BY_MANAGE,
                'rej' => REJECT_REQUEST_BY_MANAGE,
                'ret' => RETURN_REQUEST_BY_MANAGE,
                'add' => ADD_REQUEST_BY_MANAGE,
                'edit' => EDIT_REQUEST_BY_MANAGE
            ];
        }elseif ($this->user->role[0]->name ==='sub-manager'){
            $result = [
                'app' => APPROVE_REQUEST_BY_SUB_MANAGE,
                'rej' => REJECT_REQUEST_BY_SUB_MANAGE,
                'ret' => RETURN_REQUEST_BY_SUB_MANAGE,
                'add' => ADD_REQUEST_BY_SUB_MANAGE,
                'edit' => EDIT_REQUEST_BY_SUB_MANAGE
            ];
        }else{
            $result = [
                'add' => ADD_REQUEST_BY_STAFF,
                'edit' => EDIT_REQUEST_BY_STAFF
            ];
        }
        return $result[$type];
    }
    private function addTemplateForPusher($param){
        $result = [
            'users' => $param['users'],
            'template' => $this->Notification->getTemplateDetail('request'),
            'message' => [
                'user_id' => $this->user->id,
                'id' => $param['id'],
                'type_id' => $param['type_id'],
                'category' => $param['cate']
            ]
        ];
        $this->Notification->notify($result);
        return true;
    }
    private function getApprovalList($type , $request_id = null ){
        $listUser = null;
        $template = null;
        $groupUser = $this->Notification->getRecipientList('groupUser');
        $approval = TableRegistry::get('Approvals');
        if($type === EDIT_REQUEST_BY_STAFF || $type === EDIT_REQUEST_BY_SUB_MANAGE){

            $approvalInfo = $approval->find()->where(['req_id'=>$request_id])->all();
            if(count($approvalInfo)){
                return array_map(function ($v){ return $v->user_id; }, $approvalInfo->toArray());
            }else{
                return null;
            }
        }elseif ($type === ADD_REQUEST_BY_STAFF || $type === ADD_REQUEST_BY_SUB_MANAGE){
            if(!$this->isHead && $type === ADD_REQUEST_BY_STAFF  && isset($groupUser['sub-manager']) ){
                $listUser[] = $groupUser['sub-manager'];
            }else{
                if(isset($groupUser['manager'])){
                    $listUser[] = $groupUser['manager'];
                }
            }

        }elseif (($type === ADD_REQUEST_BY_MANAGE || $type === EDIT_REQUEST_BY_MANAGE) && isset($groupUser['top']) ){
            $listUser[] = $groupUser['top'];
        }
        elseif ($type >= APPROVE_REQUEST_BY_SUB_MANAGE && $type <= RETURN_REQUEST_BY_TOP ){
            //notify for top and staff
            $requestE = TableRegistry::get('Requests');
            $requestDetail = $requestE->findById($request_id)->first();
            $listUser[] = $requestDetail->user_id;
            if($this->isHead){
                if ($type === APPROVE_REQUEST_BY_MANAGE && isset($groupUser['top']) ){
                    $listUser[] =  $groupUser['top'];
                }
                if(($type === APPROVE_REQUEST_BY_TOP || $type === REJECT_REQUEST_BY_TOP || $type === RETURN_REQUEST_BY_TOP ) && isset($groupUser['manager'])){
                    if($requestDetail->dep_id === HEADQUARTER_ID){
                        $listUser[] = $groupUser['manager'];
                    }else{
                        $approvalInfo = $approval->find()->where(['req_id'=>$request_id])->all();
                        if(count($approvalInfo)){
                            $approvalInfo =  array_map(function ($v){ return $v->user_id; }, $approvalInfo->toArray());
                            $listUser = array_merge($listUser,$approvalInfo);
                        }
                    }
                }
            }else{
                if ($type === APPROVE_REQUEST_BY_SUB_MANAGE && isset($groupUser['manager']) ){
                    $listUser[] = $groupUser['manager'];
                }
                if (($type === APPROVE_REQUEST_BY_MANAGE || $type === REJECT_REQUEST_BY_MANAGE || $type === RETURN_REQUEST_BY_MANAGE) && isset($groupUser['sub-manager']) ){
                    $listUser[] = $groupUser['sub-manager'];
                    if($type === APPROVE_REQUEST_BY_MANAGE && isset($groupUser['manager'])){
                        $listUser[] = $groupUser['manager'];
                    }
                }
                if ($type === APPROVE_REQUEST_BY_TOP || $type === REJECT_REQUEST_BY_TOP || $type === RETURN_REQUEST_BY_TOP ){
                    if(isset($groupUser['manager']) &&  $groupUser['sub-manager']){
                        $listUser[] = $groupUser['manager'];
                        $listUser[] = $groupUser['sub-manager'];
                    }
                }
            }
        }else{
            return null;
        }
        $listUser = array_diff ( $listUser , [$this->user->id] );
        return $listUser;
    }
    private function getUserListByRole(){
        $tblUser = TableRegistry::get('Users');
        $userList = $tblUser->find('groupUsers', ['Roles.id <>' => $this->user->role[0]->id,'Roles.name  <>' => 'admin','Users.dep_id'=> $this->user->dep_id,'Roles.name <>' => 'staff']);
        if(!$this->isHead){
            $userList = array_merge($userList,$tblUser->find('groupUsers', ['Roles.name' => 'top']));
        }
        if(count($userList)){
            $userList = array_reduce($userList, function ($result, $item) {
                $result[$item['role']] = $item['id'];
                return $result;
            }, array());
            // $this->Notification->addRecipientList('groupUser', $userList);
        }
    }
    private function setTemplatePush(){
        $this->Notification->setTemplateList([
            'request' => 'Request'
        ]);
    }
}
