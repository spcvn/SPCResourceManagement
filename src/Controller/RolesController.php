<?php
namespace App\Controller;
use Cake\Core\Configure;
use SpcAuth\Auth\SpcAuthorize;

/**
 * Roles Controller
 *
 * @property \App\Model\Table\RolesTable $Roles
 */
class RolesController extends AuthMasterController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $roles = $this->Roles->find('all');
        $listAcl = $this->MyAuth->getACL();
        if ($this->request->is('post')) {
            $data =  $this->request->data;
            $dataini = [];
            
            if(isset($data['mode']))
            {
                    /*echo "<pre>"; print_r($listAcl); 
                // backup file acl.ini
                    echo "<pre>"; print_r($data); */
                foreach($listAcl as $key => $acls){
                    //$key = controller
                    if(isset($data[$key])){
                        $roleTemp = [];
                        foreach($data[$key] as $key1 => $actions){
                            // $val = actions ; $key1 = roleName
                            if(count($actions) === count($acls['roles'])){
                                if(isset($roleTemp['*'])){
                                    $roleTemp['*'] .= ','. $key1;
                                }else
                                    $roleTemp['*'] =$key1;
                            }else
                            {
                                foreach($actions as $act){
                                    if(isset($roleTemp[$act])){
                                        $roleTemp[$act] .= ','. $key1;
                                    }else
                                        $roleTemp[$act] = $key1;

                                }
                            }
                        }
//                        $listAcl[$key]['map'][0][] = $roleTemp;

                        $dataini[$listAcl[$key]['map']['controllers']] = $roleTemp;
                        $dataini[$listAcl[$key]['map']['controllers']]['actions'] = $listAcl[$key]['map']['actions'];

                        unset($roleTemp);
                    }
                }

            }else {
                // rollback file
            }
            rename("../config/acl.ini", "../config/aclbk.ini");
            $this->write_php_ini($dataini,'../config/acl.ini');
            $listAcl = $this->MyAuth->getACL();
        }
//        print("<pre>".print_r($listAcl,true)."</pre>"); exit;
        $this->set('roles', $roles);
        $this->set('listAcl', $listAcl);
        $this->set('_serialize', ['roles']);
    }

    /**
     * View method
     *
     * @param string|null $id Role id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */

    public function view($id = null)
    {
//
//        $role = $this->Roles->get($id, [
//            'contain' => []
//        ]);
//
//        $this->set('role', $role);
//        $this->set('_serialize', ['role']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $role = $this->Roles->newEntity();
        if ($this->request->is('post')) {
            $role = $this->Roles->patchEntity($role, $this->request->data);
            if ($this->Roles->save($role)) {
                $this->Flash->success(__('The role has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The role could not be saved. Please, try again.'));
        }
        // $user = $this->Roles->user->find('list', ['limit' => 200]);
        $this->set(compact('role'/*, 'user'*/));
        $this->set('_serialize', ['role']);
    }

    /**
     * method for write data in the ini file.
     *
     * @return bool true for a succes
     */
    function write_php_ini($array, $file)
    {
        $res = array();
        foreach($array as $key => $val)
        {
            if(is_array($val))
            {
                $res[] = "[$key]";
                foreach($val as $skey => $sval) $res[] = "$skey = ".(is_numeric($sval) ? $sval : '"'.$sval.'"');
            }
            else $res[] = "$key = ".(is_numeric($val) ? $val : '"'.$val.'"');
        }
        $this->safefilerewrite($file, implode("\r\n", $res));
    }

    /**
     * Edit method
     *
     * @param string|null $id Role id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        if ($this->request->is(['patch', 'post', 'put'])) {
            if($id == null) $id = $this->request->data['id'];
            $role = $this->Roles->get($id, [
                'contain' => ['user']
            ]);
            $role = $this->Roles->patchEntity($role, $this->request->data);
            if ($this->Roles->save($role)) {
                $this->Flash->success(__('The role has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The role could not be saved. Please, try again.'));
        }
        $this->Flash->error(__('The role could not be saved. Please, try again.'));
        return $this->redirect($this->referer());
    }

    /**
     * Delete method
     *
     * @param string|null $id Role id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['get', 'delete']);
        $role = $this->Roles->get($id);
        if ($this->Roles->delete($role)) {
            $this->Flash->success(__('The role has been deleted.'));
        } else {
            $this->Flash->error(__('The role could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    function safefilerewrite($fileName, $dataToSave)
    {    if ($fp = fopen($fileName, 'w'))
    {
        $startTime = microtime(TRUE);
        do
        {            $canWrite = flock($fp, LOCK_EX);
            // If lock not obtained sleep for 0 - 100 milliseconds, to avoid collision and CPU load
            if(!$canWrite) usleep(round(rand(0, 100)*1000));
        } while ((!$canWrite)and((microtime(TRUE)-$startTime) < 5));

        //file was locked so now we can store information
        if ($canWrite)
        {            fwrite($fp, $dataToSave);
            flock($fp, LOCK_UN);
        }
        fclose($fp);
    }

    }

}
